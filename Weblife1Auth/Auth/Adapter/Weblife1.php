<?php/** * Adapter Class for the Zend_Auth Component  * * @package   Weblife1Auth * @author    Christoph Hochstrasser <christoph.hochstrasser@gmail.com> * @copyright Copyright (c) 2010 Christoph Hochstrasser * @license   New BSD License *//** * @see Zend_Auth_Adapter_Interface */require_once 'Zend/Auth/Adapter/Interface.php';/** * @see Zend_Auth_Result */require_once 'Zend/Auth/Result.php';/** * Adapter Class for the Zend_Auth Component *  * @package   Weblife1Auth * @author    Christoph Hochstrasser <christoph.hochstrasser@gmail.com> * @copyright Copyright (c) 2010 Christoph Hochstrasser */class Weblife1Auth_Auth_Adapter_Weblife1 implements Zend_Auth_Adapter_Interface{    /**   * Instance of the Weblife1Api   * @var Weblife1Api_Api   */  protected $_api;    /**   * Identity value   * @var string   */  protected $_identity;    /**   * Credential value   * @var string   */  protected $_credential;    /**   * Result for Zend_Auth_Result   * @var array   */  protected $_authenticateResultInfo;    /**   * Array of Identity Information   * @var array   */  protected $_resultSet;    /**   * __construct()   *   * @param  Weblife1Api_Api $api An instance of the Weblife1Api   * @return void   */  public function __construct(Weblife1Api_Api $api)  {    $this->_api = $api;  }    /**   * setIdentity() - Sets the identity value   *   * @param  string                             $identity   * @return Weblife1Auth_Auth_Adapter_Weblife1 Providing a fluent interface   */  public function setIdentity($identity)  {    $this->_identity = $identity;    return $this;  }    /**   * setCredential() - Sets the credential value   *   * @param  string                                  $credential   * @return Weblife1Auth_Zend_Auth_Adapter_Weblife1 Providing a fluent interface   */  public function setCredential($credential)  {    $this->_credential = md5($credential);    return $this;  }    /**   * getResultSetObject() - Returns the Identity Information    * contained in an stdClass object for writing it to the session later   *   * @return stdClass   */  public function getResultSetObject()  {        $result = new stdClass();        if( null !== $this->_resultSet ) {      foreach($this->_resultSet as $property=>$value) {        $result->{$property} = $value;      }    } else {      require_once 'Zend/Auth/Adapter/Exception.php';      throw new Zend_Auth_Adapter_Exception("You are attempting to retrieve a Resultset without                                            logging in.");    }        return $result;  }    /**   * getResultSetArray() - Returns the identity information as array   *   * @return array   */  public function getResultSetArray()  {    return $this->_resultSet;  }    /**   * authenticate() - Defined by Zend_Auth_Adapter_Interface   * Does the authentication   *   * @return Zend_Auth_Result   */  public function authenticate()  {    $this->_authenticateSetup();        $userSection = new Weblife1Api_Section_User($this->_api);        $response = $userSection->login($this->_identity,$this->_credential);        if( !$response->error() ) {          $this->_authenticateResultInfo['code'] = Zend_Auth_Result::SUCCESS;      $this->_authenticateResultInfo['messages'][] = 'Authentication successful';      $this->_resultSet = array(        'id'       => (string) $response->load('userid'),        'username' => (string) $response->load('username'),        'token'    => (string) $response->load('authtoken'),      );          } else {      $this->_authenticateResultInfo['messages'] = array(        'Weblife1 Api error: '.$response->getErrorCode().' - '.$response->getErrorMessage().'.',      );    }        return new Zend_Auth_Result(      $this->_authenticateResultInfo['code'],      $this->_authenticateResultInfo['identity'],      $this->_authenticateResultInfo['messages']    );      }    /**   * _authenticateSetup() - Checks the existence of the identity and credential   * and predefines the information for Zend_Auth_Result   *   * @return bool true   */  protected function _authenticateSetup()  {    $exception = null;        if( null === $this->_identity ) {      $exception = "A Identity must be provided prior Authentication                     with Weblife1Auth_Adapter for Zend Framework";    } elseif( null === $this->_credential ) {      $exception = "A Credential must be provided prior Authentication                     with Weblife1Auth_Adapter for Zend Framework";    }        if( null !== $exception ) {      require_once 'Zend/Auth/Adapter/Exception.php';      throw new Zend_Auth_Adapter_Exception($exception);    }        $this->_authenticateResultInfo = array(      'code'=>Zend_Auth_Result::FAILURE,      'identity'=>$this->_identity,      'messages'=>array()    );        return true;      }}?>