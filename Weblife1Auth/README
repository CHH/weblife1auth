==================== Weblife1Auth ================This is a library for Authentication via the Weblife1Api. It dependson the Weblife1Api by the Szene1 Developers, available on "http://www.szene1.at/community/appzone".Currently it provides an adapter for Zend_Auth.Install: Copy the contents of the downloaded archive or cloned git repository and the Weblife1 PHP Client Library in your library folder next to "Zend", so it looks like the following:/library: - Zend/ - Weblife1Auth/ - Weblife1Api/If you are using Zend_Loader and set_include_path() in your Zend Framework Project, both Libraries should work out of the box. Otherwise you have to include the Libraries by yourself. Example:Usage is like every other Zend_Auth_Adapter. The constructor for the adapterexpects an instance of Weblife1Api_Api, which you have to prepare in the controller (_getWeblife1()),as parameter.The Object returned by getResultSetObject() has the following properties: - id: The ID of the Weblife1 User - username - token: The Authtoken for user-based request to the Weblife1 API <?phpclass UserController extends Zend_Controller_Action{  //Login Action  public function loginAction()  {    $auth = Zend_Auth::getInstance();    if( !$auth->hasIdentity() ) {      $adapter = new Weblife1Auth_Zend_Auth_Adapter_Weblife1($this->_getWeblife1());            $adapter->setIdentity("myUsername")->setCredential("mySecretPassword");            $result = $auth->authenticate($adapter);            if( $result->isValid() ) {        $data = $adapter->getResultSetObject();        $auth->getStorage()->write($data);        $this->_helper->redirector("foo");              } else {              }    } else {      $this->_helper->redirector("foo");    }  }  public function logoutAction()  {    $auth = Zend_Auth::getInstance();          if( !$auth->hasIdentity() ) {      $userSection = new Weblife1Api_Section_User($this->_getWeblife1());      $response = $userSection->logout(Zend_Auth::getInstance()->getIdentity()->token);            if( !$response->error() ) {        $auth->clearIdentity();      }            $this->_helper->redirector("foo");    }  }  protected function _getWeblife1()  {    if($this->_weblife1 === null) {      $this->_weblife1 = new Weblife1Api_Api(                                "myWeblife1ApiKey",                                "myWeblife1ApiSecret",                                null,                                Weblife1Api_Api::REQUEST_TYPE_GET      );    }    return $this->_weblife1;  }}